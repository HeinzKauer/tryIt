= Feature Driven Development
:doctype: article
:lang: de
:toc: 
:toclevels: 4
:icons:
:iconsdir: {asciidoc-dir}/images/icons
:source-highlighter: source-highlight
:language: java


== Todo == 


== Shell ==

=== logon ===
Beim logon der shell werden verschiedene scripts eingelesen 

/etc/profile 
/etc/profile.d/

$HOME/.profile 


https://www.video2brain.com/de/tutorial/die-konfigurationsdateien

==== konfiguration bei der Bash shell ====
LoginShell

- /etc/profile 
- $HOME/.bash_profile 
- $HOME/.bash_login
- $HOME/.profile 

Sub-Shell 

- $HOME/.bashrc 

=== echo ===

man echo


=== more ===

more # eine Datei ausgeben 


== Helper ==
------------------------------
git checkout -b QA-Branch remotes/origin/QA-Branch --
------------------------------


== Erstellen QA-Branch 

== Recreate Branch 
.Berechtigungen einstellen 
------------------------------
$ ll */.git | grep config
$ chmod 770 */.git/config

$ ll .git | grep config
$ chmod 770 .git/config
------------------------------
=== Auflisten der vorhandenen Features 
------------------------------
git recreate-branch QA-Branch -a `lsp` -l
------------------------------
Eine Auflistung -l mit -x funktioniert nicht. Aber es kommt eine Frage --> Wollen sie wirklich ?

--------------------------------------
git recreate-branch QA-Branch -a `lsp` -x exclude  -x exclude 
--------------------------------------

=== save neu erzeugter QA-Branch push 
--------------------------------------
git push origin QA-Branch -f
--------------------------------------



=== Bei Fehler / Abbruch auf QA zur端cksetzen 
------------------------------
git checkout BRANCH-PER-FEATURE-PREFIX-QA-Branch 
git branch -D QA-Branch 
git branch -m QA-Branch
------------------------------




=== Aktualisieren vom QA-Branch 
------------------------------
git checkout master 
git branch -D QA-Branch 
git checkout -b QA-Branch remotes/origin/QA-Branch
- oder 
git fetch --all --tags     // geht leider nicht wenn mehrere repositorys verwendet werden 
git fetch origin --tags 
git reset --hard origin/QA-Branch // wenn keine lokale Aenderunge 

git pull
------------------------------

=== setzen neuer Starting Point 
Achtung der Commit muss zuerst gemacht sein 
------------------------------
git tag starting-point-<version>
git tag starting-point-3.7.3
git push --tags 
------------------------------

=== Move QA-Branch 
------------------------------
git branch -d QA-Branch
git checkout -b QA-Branch starting-point-3.7.3
git push origin QA-Branch
------------------------------


=== rebase: welche feature sind nicht in eimen Tag 端bernommen
Damit kann festgestellt werden welche feature nicht auf einem bestimmoten Tag ge-Merget sind 
------------------------------
git branch -r --no-merged master --contains starting-point-<previousversion>
git branch -r --no-merged master --contains starting-point-3.7
------------------------------

=== rebase feature branches that were nit released 
------------------------------
git checkout <feature>

git pull origin <feature>
git tag before-<feature>-rebase
git push --tags 
git rebase master 

*Resolve any conflicts*
git diff HEAD
git add <resolvedFiles>
git rebase --continue

*Push*
git push origin <feature> --force
------------------------------

.sample
------------------------------
git checkout feature/KLBLD-2966-LogClientsideExceptionsOnServer 
git pull origin feature/KLBLD-3780-Kontoauszug-f-Text-Excel-Download
git tag before-KLBLD-3780-Kontoauszug-f-Text-Excel-Download-rebase
git push --tags 
git rebase master 

git push origin feature/KLBLD-3780-Kontoauszug-f-Text-Excel-Download --force
------------------------------


=== Git-Helper 
------------------------------
gitgraph

gitproject <command>    // iteriert 端ber alle git-Projekte und f端hrt den <command> aus
------------------------------



=== Tag master mit dem neuen Starting Point 
------------------------------
git checkout master 
git tag startind-piont-<version>
git push --tags
------------------------------

== Vorlage Code 
[NOTE]
a Note 



== Links und Quellenangaben
https://de.wikipedia.org/wiki/Feature_Driven_Development




/Data/GitRepos/github/heinzkauer/tryIt/asciidoc/doc